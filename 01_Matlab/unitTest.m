% This code:
% 1. Unit-tests pytorch against imported onnx model to matlab:
%    Using:
%       a. inputs from the recoreded pytorch inputs-outputs file "unitTest_pytorch.csv"
%       b. loaded pytorch model model31.onnx
%    Infer matlab outputs and compare to outputs in "unitTest_pytorch.csv".
% 2. Generate "unitTest.h":
%    Recorded inputs of pytorch in c format for unit-testing pytorch
%    againts generated code (used in ../02_Cmake).
% 3. Generate "unitTest_out.h":
%    Recorded outputs of pytorch in c format for unit-testing pytorch
%    againts generated code (used in ../02_Cmake).
%
% 
% Needed matlab licenses:
% 1. distrib_computing_toolbox
% 2. matlab
% 3. neural_network_toolbox

A = load('unitTest_pytorch.csv');

fid = fopen('unitTest_outErr.csv', 'w');
fid2 = fopen('unitTest.h', 'w');
fprintf(fid2, '// generated by mfile at :%s\n', datestr(now,'mmmm dd, yyyy HH:MM:SS.FFF AM'));
fprintf(fid2, 'static float inVec[] = {');
fid3 = fopen('unitTest_out.h', 'w');
fprintf(fid3, '// generated by mfile at :%s\n', datestr(now,'mmmm dd, yyyy HH:MM:SS.FFF AM'));
fprintf(fid3, 'static float outVec[] = {');
maxRange = 0;
for i=1:size(A,1)
    r = A(i,1:16);
    out_pyTorch = A(i,17:end);
    for ii=1:16
        fprintf(fid2, '%.10f, ', r(ii));
        maxRange = max(maxRange, r(ii));
    end
    for ii=1:3
        fprintf(fid3, '%.10f, ', out_pyTorch(ii));
    end
    fprintf(fid2, '\n');
    fprintf(fid3, '\n');
    out_onnx = model31_func(r);
    fprintf(fid, '%f, %f, %f\n', out_onnx-out_pyTorch);
    if sum(abs(out_onnx-out_pyTorch))>1e-3
        disp(['Error in i=' num2str(i) '.'])
    end
    disp('')
end

disp(['maximum range = ' num2str(maxRange)])
fprintf(fid2, '};');
fclose(fid2);
fprintf(fid3, '};');
fclose(fid3);
fclose(fid);